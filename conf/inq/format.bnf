// https://github.com/awalterschulze/katydid/blob/master/asm/asm.bnf


_lineComment : '#' {.} '\n' ;
!comment : _lineComment;

!whitespace: ' ' | '\t' | '\n' | '\r' ;
_letter : 'a'-'z' | 'A'-'Z' ;

_digit : '0'-'9' ;

_idchar : _letter | _digit | '_' | '-' | '.' | '/';

_sizecode : 'k' | 'm' | 'g' | 't' | 'p' | '%';

_uint : _digit {_digit};
uint_lit : _uint;
sized_uint_lit : _uint _sizecode;

name : _idchar {_idchar} ;
operator : '>' | '<';

<< import "inspeqtor/conf/inq/ast" >>

/*

Examples:

check service mysql
  if memory(rss) > 6g for 2 cycles then alert

check service redis
  if memory(rss) > 1g for 2 cycles then alert
  if cpu(user) > 95% for 2 cycles then alert

check host
  if cpu(user) > 400% for 2 cycles then alert
  if swap > 20% for 2 cycles then alert

*/

Check
  : Preamble Checktype name ParameterList RuleList  << ast.NewProcessCheck($1, $2, $4, $3), nil >>
  | Preamble Checktype name RuleList                << ast.NewProcessCheck($1, $2, $3, map[string]string{}), nil >>
  | Preamble "host" RuleList                        << ast.NewHostCheck($2), nil >>;

Preamble
 : "check"          << $0, nil >>
;

Checktype
 : "process"        << $0, nil >>
 | "service"        << $0, nil >>
;

ActionList
  : Action                   << []ast.Action{$0.(ast.Action)}, nil >>
  | Action "," ActionList    << ast.AppendAction($0, $2) >>
;

Action
  : "restart"       << ast.AddAction($0, nil) >>
  | "alert"         << ast.AddAction($0, nil) >>
  | "alert" name    << ast.AddAction($0, $1) >>
;

ParameterList
  : "with" Parameters   << $1, nil >>;

Parameters
  : name name "," Parameters      << ast.AddParam($0, $1, $3) >>
  | name name                     << ast.AddParam($0, $1, nil) >>;

IntAmount
  : uint_lit            << ast.ToInt64($0) >>;

HumanAmount
  : sized_uint_lit      << ast.HumanAmount($0) >>
  | uint_lit            << ast.ToInt64($0) >>;

// Metrics are named like "family(name)", e.g. memory(rss), cpu(user)
// or mysql(questions).
//
// Name is optional to allow English-like naming for special metrics
// like "swap" that are just a single number, otherwise we'd have to
// force awkward naming like "swap(usage)".
//
// Allow metric names to begin with numbers so we can support
// metrics like "load(1)".
Metric
  : name                    << ast.Metric($0, nil) >>
  | name "(" name ")"       << ast.Metric($0, $2) >>
  | name "(" uint_lit ")"       << ast.Metric($0, $2) >>;

Rule
  : "if" Metric operator HumanAmount "then" ActionList  << ast.NewRule($1, $2, $3, $5, int64(1)), nil >>
  | "if" Metric operator HumanAmount "for" IntAmount "cycles" "then" ActionList  << ast.NewRule($1, $2, $3, $8, $5), nil >>;

RuleList
  : Rule                              << ast.NewRuleList($0), nil >>
  | RuleList Rule                     << ast.AppendRule($0, $1), nil >>;
